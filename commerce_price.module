<?php
// $Id$

/**
 * @file
 * Defines the Price field with widgets and formatters used to add prices with
 *   currency codes to various Commerce entities.
 */


/**
 * Implements hook_field_info().
 */
function commerce_price_field_info() {
  return array(
    'commerce_price' => array(
      'label' => t('Price'),
      'description' => t('This field stores prices for products consisting of an amount and a currency.'),
      'translatable' => FALSE,
      'default_widget' => 'commerce_price_simple',
      'default_formatter' => 'commerce_price_default',
      'settings' => array(),
      'property_type' => 'commerce_price',
      'property_callbacks' => array('commerce_price_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function commerce_price_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  // Ensure only numeric values are entered in price fields.
  foreach ($items as $delta => $item) {
    if (!empty($item['price']) && !is_numeric($item['price'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'price_numeric',
        'message' => t('%name: you must enter a numeric value for the price.', array('%name' => check_plain($instance['label']))),
      );
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function commerce_price_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'commerce_price') {
    // TODO: Convert prices to the appropriate integer value.
  }
}

/**
 * Implementation of hook_field_is_empty().
 */
function commerce_price_field_is_empty($item, $field) {
  return !isset($item['price']) || (string) $item['price'] == '';
}

/**
 * Creates a required, locked instance of a price field on the specified bundle.
 */
function commerce_price_create_instance($name, $entity_type, $bundle, $label, $weight = 0) {
  $field = field_info_field($name);
  $instance = field_info_instance($entity_type, $name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $name,
      'type' => 'commerce_price',
      'cardinality' => 1,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,

      'label' => $label,
      'required' => TRUE,
      'settings' => array(),

      // Because this widget is locked, we need it to use the full price widget
      // since the currency option can't be adjusted at the moment.
      'widget' => array(
        'type' => 'commerce_price_full',
        'weight' => $weight,
        'settings' => array(
          'currency_code' => 'default',
        ),
      ),

      'display' => array(),
    );

    $entity_info = entity_get_info($entity_type);

    // Spoof the default view mode so its display type is set.
    $entity_info['view modes']['default'] = array();

    foreach ($entity_info['view modes'] as $view_mode => $data) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'commerce_price_formatted_amount',
      );
    }

    field_create_instance($instance);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_price_field_formatter_info() {
  return array(
    'commerce_price_raw_amount' => array(
      'label' => t('Raw amount'),
      'field types' => array('commerce_price'),
    ),
    'commerce_price_formatted_amount' => array(
      'label' => t('Formatted amount'),
      'field types' => array('commerce_price'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_price_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Loop through each price value in this field.
  foreach ($items as $delta => $item) {
    // Theme the display of the price based on the display type.
    if ($display['type'] == 'commerce_price_raw_amount') {
      $element[$delta] = array(
        '#markup' => check_plain($item['price']),
      );
    }
    elseif ($display['type'] == 'commerce_price_formatted_amount') {
      $element[$delta] = array(
        '#markup' => commerce_currency_format($item['price'], $item['currency_code'], $object),
      );
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_price_field_widget_info() {
  return array(
    'commerce_price_simple' => array(
      'label' => t('Price textfield'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'currency_code' => 'default',
      ),
    ),
    'commerce_price_full' => array(
      'label' => t('Price with currency'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'currency_code' => 'default',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function commerce_price_field_widget_settings_form($field, $instance) {
  $form = array();

  // Build an options array of allowed currency values including the option for
  // the widget to always use the store's default currency.
  $options = array(
    'default' => t('- Default store currency -'),
  );

  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = t('@code - @name', array('@code' => $currency->code, '@name' => $currency->name));
  }

  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => ($instance['widget']['type'] == 'commerce_price_simple') ? t('Currency') : t('Default currency'),
    '#options' => $options,
    '#default_value' => $instance['widget']['settings']['currency_code'],
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_price_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Use the default currency if the setting is not present.
  if ($instance['widget']['settings']['currency_code'] == 'default' ||
      empty($instance['widget']['settings']['currency_code'])) {
    $default_currency_code = NULL;
  }
  else {
    $default_currency_code = $instance['widget']['settings']['currency_code'];
  }

  // If a price has already been set for this instance prepare default values.
  if (isset($items[$delta]['price'])) {
    $currency = commerce_currency_load($items[$delta]['currency_code']);

    // Round the default value.
    $default_price = round($items[$delta]['price'], 2);

    // Run it through number_format() to add the decimal places in if necessary.
    if (strpos($default_price, '.') === FALSE || strpos($default_price, '.') > strlen($default_price) - $currency->decimals) {
      $default_price = number_format($default_price, $currency->decimals, '.', '');
    }

    $default_currency_code = $items[$delta]['currency_code'];
  }
  else {
    $default_price = NULL;
  }

  // Load the default currency for this instance.
  $default_currency = commerce_currency_load($default_currency_code);

  $element['#attached']['css'][] = drupal_get_path('module', 'commerce_price') . '/theme/commerce_price.css';

  // Build the form based on the type of price widget.
  switch ($instance['widget']['type']) {
    // The simple widget is just a textfield with a non-changeable currency.
    case 'commerce_price_simple':
      $element['price'] = array(
        '#type' => 'textfield',
        '#title' => $element['#title'],
        '#default_value' => $default_price,
        '#size' => 10,
        '#field_suffix' => $default_currency->code,
      );
      $element['currency_code'] = array(
        '#type' => 'value',
        '#default_value' => $default_currency->code,
      );
      break;

    // The full widget is a textfield with a currency select list.
    case 'commerce_price_full':
      $element['price'] = array(
        '#type' => 'textfield',
        '#title' => $element['#title'],
        '#default_value' => $default_price,
        '#size' => 10,
      );

      // Build a currency options list from all enabled currencies.
      $options = array();

      foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
        $options[$currency_code] = check_plain($currency->code);
      }

      // If the current currency value is not available, add it now with a
      // message in the help text explaining it.
      if (empty($options[$default_currency->code])) {
        $options[$default_currency->code] = check_plain($default_currency->code);

        if (!empty($default_currency->symbol)) {
          $options[$default_currency->code] .= ' - ' . check_plain($default_currency->symbol);
        }

        $description = t('The currency set for this price is not currently enabled. If you change it now, you will not be able to set it back.');
      }
      else {
        $description = '';
      }

      // If only one currency option is available, don't use a select list.
      if (count($options) == 1) {
        $currency_code = array_shift(array_keys($options));

        $element['price']['#field_suffix'] = $currency_code;

        $element['currency_code'] = array(
          '#type' => 'value',
          '#default_value' => $currency_code,
        );
      }
      else {
        $element['price']['#prefix'] = '<div class="commerce-price-full">';

        $element['currency_code'] = array(
          '#type' => 'select',
          '#description' => $description,
          '#options' => $options,
          '#default_value' => isset($items[$delta]['currency_code']) ? $items[$delta]['currency_code'] : $default_currency->code,
          '#suffix' => '</div>',
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function commerce_price_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['price'], $error['message']);
}

/**
 * Callback to alter the property info of price fields.
 *
 * @see commerce_product_reference_field_info().
 */
function commerce_price_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['data info']['properties'] = array(
    'price' => array(
      'type' => 'decimal',
      'label' => t('Price amount'),
      'getter callback' => 'commerce_price_field_get_price',
    ),
    'currency-code' => array(
      'type' => 'list<text>',
      'label' => t('Currency'),
      'options list' => 'commerce_currency_get_symbol',
      'getter callback' => 'commerce_price_field_get_currency_code',
    ),
  );
  unset($property['query callback']);
}

/**
 * Entity metadata callback for getting the price value of price fields.
 *
 * @see commerce_price_property_info_callback().
 */
function commerce_price_field_get_price(&$item, array $options, $name) {
  return $item['price'];
}

/**
 * Entity metadata callback for getting the price value of price fields.
 *
 * @see commerce_price_property_info_callback().
 */
function commerce_price_field_get_currency_code(&$item, array $options, $name) {
  return $item['currency_code'];
}

function commerce_price_object_get_price($price) {
  return $price->getPrice();
}

function commerce_price_object_get_currency_code($price) {
  return $price->getCurrencyCode();
}
