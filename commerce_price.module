<?php
// $Id$

/**
 * @file
 */


/**
 * Implements hook_field_info().
 */
function commerce_price_field_info() {
  return array(
    'commerce_price' => array(
      'label' => t('Price'),
      'description' => t('This field stores prices for products consisting of an amount and a currency.'),
      'translatable' => FALSE,
      'default_widget' => 'commerce_price_simple',
      'default_formatter' => 'commerce_price_default',
      'settings' => array(
        'currency_code' => 'USD',
      ),
      'property_type' => 'commerce_price',
      'property_callbacks' => array('commerce_price_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function commerce_price_field_schema($field) {
  if ($field['type'] == 'commerce_price') {
    return array(
      'columns' => array(
        'price' => array(
          'description' => 'The price amount.',
          'type' => 'numeric',
          'precision' => 16,
          'scale' => 5,
          'not null' => TRUE,
        ),
        'currency_code' => array(
          'description' => 'The currency code for the price.',
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
        ),
      ),
      // TODO: Review this index... what's it for?
      /*'indexes' => array(
        'currency_price' => array('currency_code', 'price'),
      ),*/
    );
  }
}

/**
 * Implements hook_field_settings_form().
 */
function commerce_price_field_settings_form($field, $instance, $has_data) {
  /*$settings = $field['settings'];
  $form = array();

  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#options' => commerce_currency_get_symbol(),
    '#default_value' => !empty($settings['currency_code']) ? $settings['currency_code'] : 'USD',
    '#disabled' => $has_data,
  );

  return $form;*/
}

/**
 * Implements hook_field_validate().
 */
function commerce_price_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'commerce_price') {
    // TODO: Validate prices based on valid amount and enabled currency.
    // drupal_set_message('hook_field_validate()<pre>'. print_r($items, TRUE) .'</pre>');
  }
}

/**
 * Implements hook_field_presave().
 */
function commerce_price_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'commerce_price') {
    // drupal_set_message('hook_field_presave()<pre>'. print_r($items, TRUE) .'</pre>');
  }
}

/**
 * Implementation of hook_field_is_empty().
 */
function commerce_price_field_is_empty($item, $field) {
  return !isset($item['price']) || (string) $item['price'] == '';
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_price_field_formatter_info() {
  // TODO: Additional formatters should be defined to interact with the Price
  // handler through Rules.
  return array(
    'commerce_price_default' => array(
      'label' => t('Default'),
      'field types' => array('commerce_price'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_price_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // TODO: Pull the currency from the price field data.
  $currency = commerce_currency_load('USD');

  switch ($display['type']) {
    case 'commerce_price_default':
      foreach ($items as $delta => $item) {
        // TODO: This should become a theme function.
        $element[$delta] = array(
          '#markup' => t('@symbol@price @code', array('@symbol' => $currency->symbol, '@price' => number_format(round($item['price'], 2), 2), '@code' => $currency->code)),
        );
      }

      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function commerce_price_field_widget_info() {
  return array(
    'commerce_price_simple' => array(
      'label' => t('Simple price (without currency)'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'currency_code' => 'USD',
      ),
    ),
    /* 'commerce_price_full' => array(
      'label' => t('Price with currency'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'currency_code' => 'USD',
      ),
    ),*/
  );
}

/**
 * Implements hook_field_settings_form().
 */
function commerce_price_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form = array();

  if ($widget['type'] == 'commerce_price_full') {
    $form['currency_code'] = array(
      '#type' => 'select',
      '#title' => t('Default currency'),
      '#options' => commerce_currency_get_symbol(),
      '#default_value' => $settings['currency_code'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function commerce_price_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $currency_code = $instance['widget']['settings']['currency_code'];
  $currency = commerce_currency_load('USD');

  // If a price has already been set for this instance...
  if (isset($items[$delta]['price'])) {
    // Round the default value.
    $default = round($items[$delta]['price'], 2);

    // Run it through number_format() to add the decimal places in if necessary.
    if (strpos($default, '.') === FALSE || strpos($default, '.') > strlen($default) - 2) {
      $default = number_format($default, 2);
    }
  }
  else {
    $default = NULL;
  }

  switch ($instance['widget']['type']) {
    case 'commerce_price_simple':
      return $element + array(
        'price' => array(
          '#type' => 'textfield',
          '#default_value' => $default,
          '#size' => 10,
          '#field_suffix' => $currency->code,
        ),
        'currency_code' => array(
          '#type' => 'value',
          '#default_value' => $currency->code,
        ),
      );

    case 'commerce_price_full':
      $element['price'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['price']) ? $items[$delta]['price'] : NULL,
        '#size' => 10,
      );
      $element['currency_code'] = array(
        '#type' => 'select',
        '#options' => commerce_currency_get_symbol(),
        '#default_value' => isset($items[$delta]['currency_code']) ? $items[$delta]['currency_code'] : $currency->code,
      );
      break;
  }

  return $element;
}

/**
 * Callback to alter the property info of price fields.
 *
 * @see commerce_product_reference_field_info().
 */
function commerce_price_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = str_replace('_', '-', $field['field_name']);
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['data info']['properties'] = array(
    'value' => array(
      'type' => 'decimal',
      'label' => t('Price value'),
      'getter callback' => 'commerce_price_get_price_value',
    ),
    'currency' => array(
      'type' => 'text',
      'label' => t('Currency'),
      'options list' => 'commerce_currency_get_symbol',
      'getter callback' => 'entity_metadata_verbatim_get',
    ),
  );
  unset($property['query callback']);
}

/**
 * Entity metadata callback for getting the price value of price fields.
 *
 * @see commerce_price_property_info_callback().
 */
function commerce_price_get_price_value(&$item, array $options, $name) {
  return $item['price'];
}
